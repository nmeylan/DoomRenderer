// Generated by CoffeeScript 1.8.0
(function() {
  var COLORMAP_SIZE, Colormap, DIRECTORY_LUMP_ENTRY_SIZE, LUMP_NAMES, LumpInfo, NUMBER_PALETTES, Palette, Playpal, ctx;

  ctx = window.applicationContext;

  DIRECTORY_LUMP_ENTRY_SIZE = 16;

  NUMBER_PALETTES = 14;

  COLORMAP_SIZE = 34;

  LUMP_NAMES = ["BLOCKMAP", "COLORMAP", "DMXGUS", "ENDOOM", "GENMIDI", "LINEDEFS", "NODES", "PLAYPAL", "PNAMES", "REJECT", "SECTORS", "SEGS", "SIDEDEFS", "SSECTORS", "TEXTURE1", "TEXTURE2", "THINGS", "VERTEXES"];

  ctx.Wad = (function() {
    function Wad() {
      this.header = {};
      this.lumpHash = {};
      this.data = null;
    }

    Wad.prototype.read = function(data) {
      this.data = new ctx.WadByteData(data);
      return this.readHeader();
    };

    Wad.prototype.readHeader = function() {
      this.header.identification = this.data.getString(0, 4);
      if (this.header.identification !== 'IWAD') {
        throw 'Only IWAD files are read';
      }
      this.header.numberLumps = this.data.getUInt32(0x04);
      this.header.lumpInfoTableOffset = this.data.getUInt32(0x08);
      if (this.header.lumpInfoTableOffset + this.header.numberLumps * DIRECTORY_LUMP_ENTRY_SIZE > this.data.lengthInBytes) {
        throw 'Can\'t contains all lump tables';
      }
      return this.collectLumpInfo();
    };

    Wad.prototype.readPlaypal = function() {
      return this.playpal = new Playpal(this.lumpHash["PLAYPAL"].getByteData(this.data));
    };

    Wad.prototype.readColormap = function() {
      return this.colormap = new Colormap(this.lumpHash["COLORMAP"].getByteData(this.data));
    };

    Wad.prototype.collectLumpInfo = function() {
      var i, lumpInfo, name, offset, position, size, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.header.numberLumps - 1; _i <= _ref; i = _i += 1) {
        offset = this.header.lumpInfoTableOffset + i * DIRECTORY_LUMP_ENTRY_SIZE;
        position = this.data.getUInt32(offset + 0x00);
        size = this.data.getUInt32(offset + 0x04);
        name = this.data.getString(offset + 0x08, 8);
        lumpInfo = new LumpInfo(name, position, size);
        _results.push(this.lumpHash[name] = lumpInfo);
      }
      return _results;
    };

    return Wad;

  })();

  Colormap = (function() {
    function Colormap(data) {
      var i, j, position, _i, _j, _ref;
      this.data = data;
      this.colors = [];
      position = 0;
      for (i = _i = 0, _ref = COLORMAP_SIZE - 1; _i <= _ref; i = _i += 1) {
        this.colors[i] = new Uint8Array(256);
        for (j = _j = 0; _j <= 255; j = _j += 1) {
          this.colors[i][j] = this.data.getUInt8(position++);
        }
      }
    }

    return Colormap;

  })();

  Playpal = (function() {
    function Playpal(data) {
      var i, j, palette, position, _i, _j, _ref;
      this.data = data;
      this.palettes = [];
      position = 0;
      for (i = _i = 0, _ref = NUMBER_PALETTES - 1; _i <= _ref; i = _i += 1) {
        palette = new Palette;
        for (j = _j = 0; _j <= 255; j = _j += 1) {
          palette.r[j] = this.data.getUInt8(position++);
          palette.g[j] = this.data.getUInt8(position++);
          palette.b[j] = this.data.getUInt8(position++);
        }
        this.palettes.push(palette);
      }
    }

    return Playpal;

  })();

  Palette = (function() {
    function Palette() {
      this.r = new Uint8Array(256);
      this.g = new Uint8Array(256);
      this.b = new Uint8Array(256);
    }

    return Palette;

  })();

  LumpInfo = (function() {
    function LumpInfo(name, position, size) {
      this.name = name;
      this.position = position;
      this.size = size;
    }

    LumpInfo.prototype.getByteData = function(data) {
      data.view(this.position, this.size);
      return data;
    };

    return LumpInfo;

  })();

}).call(this);

//# sourceMappingURL=wad.js.map
